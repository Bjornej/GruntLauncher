var names = [];
var module = {};
var grunt = {};

var require = function(){
	var a = function(){};
	a.filterDev = function(){
		return {
			forEach: function(){}
		}; 
	};

	a.resolve = function(){
		return "";
	}; 

	return a;
};

grunt.initConfig=function(param){
	for(var prop in param){
		if(param.hasOwnProperty(prop)){
			names.push(prop);
			if(param[prop] === Object(param[prop])){
			    var arr=[];
				for(var innerProp in param[prop]){
					if(param[prop].hasOwnProperty(innerProp)){
						if(innerProp!=='options'){
							arr.push(prop+":"+innerProp);
						}
					}
				}
				if(arr.length > 1){
					for (var i=0;i< arr.length;i++){
						names.push(arr[i]);
					}
				}
			}
		}
	}
};
grunt.file = { 
	match: function(){return {};},
	isMatch: function(){return {};},
	expand: function(){return {};},
	expandMapping: function(){return {};},
	mkdir: function(){return {};},
	recurse: function(){return {};},
	readYAML: function(){return {};},
	write: function(){return {};},
	copy: function(){return {};},
	exists: function(){return {};},
	isFile: function(){return {};},
	isPathAbsolute: function(){return {};},
	arePathsEquivalent: function(){return {};},
	doesPathContain: function(){return {};},
	isPathCwd: function(){return {};},
	isPathInCwd: function(){return {};},
	read: function(){return {};},
	readJSON: function(){return {};}
}
grunt.registerTask= function(name){names.push(name);};
grunt.registerMultiTask= function(name){names.push(name);};
grunt.loadNpmTasks = function(){};
grunt.template = {
	today:function(){},
	addDelimiters:function(){},
	setDelimiters:function(){},
	process:function(){}
};
grunt.renameTask = function(a,b){ names.push(b);}
grunt.option = function(){};

var __dirname = "";