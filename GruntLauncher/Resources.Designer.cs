//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.34011
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bjornej.GruntLauncher {
    using System;
    
    
    /// <summary>
    ///   Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
    /// </summary>
    // Questa classe è stata generata automaticamente dalla classe StronglyTypedResourceBuilder.
    // tramite uno strumento quale ResGen o Visual Studio.
    // Per aggiungere o rimuovere un membro, modificare il file con estensione ResX ed eseguire nuovamente ResGen
    // con l'opzione /str oppure ricompilare il progetto VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Bjornej.GruntLauncher.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
        ///   ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a var tasks = [];
        ///
        ///var gulp = {};
        ///
        ///gulp.task = function(task, func){
        ///	tasks.push(task);
        ///}
        ///
        ///gulp.src = function(){
        ///	return gulp;
        ///}
        ///
        ///gulp.dest = function(){
        ///	return gulp;
        ///}
        ///
        ///gulp.pipe = function(){
        ///	return gulp;
        ///}
        ///
        ///gulp.watch= function(){
        ///
        ///}
        ///
        ///var require = function(param){
        ///	if(param===&quot;gulp&quot;){
        ///		return gulp;
        ///	}else{
        ///		var f = function(){}
        ///		return f;
        ///	}
        ///};
        ///
        ///var __dirname=&quot;&quot;;.
        /// </summary>
        internal static string gulpInit {
            get {
                return ResourceManager.GetString("gulpInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a var names = [];
        ///var module = {};
        ///var grunt = {};
        ///
        ///var require = function(){
        ///	var a = function(){};
        ///	a.filterDev = function(){
        ///		return {
        ///			forEach: function(){}
        ///		}; 
        ///	} 
        ///	return a;
        ///};
        ///
        ///grunt.initConfig=function(param){
        ///	for(var prop in param){
        ///		if(param.hasOwnProperty(prop)){
        ///			names.push(prop);
        ///		}
        ///	}
        ///};
        ///grunt.file = { readJSON: function(){return {};}}
        ///grunt.registerTask= function(name){names.push(name);};
        ///grunt.loadNpmTasks = function(){};
        ///grunt.template = {today:function(){}}; [stringa troncata]&quot;;.
        /// </summary>
        internal static string Init {
            get {
                return ResourceManager.GetString("Init", resourceCulture);
            }
        }
    }
}
